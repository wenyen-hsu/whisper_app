{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useRef } from 'react';\nconst useRecorder = (onStop, onError) => {\n  _s();\n  const [recording, setRecording] = useState(false);\n  const mediaRecorderRef = useRef(null);\n  const streamRef = useRef(null);\n  const chunksRef = useRef([]);\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      streamRef.current = stream;\n      let mimeType = '';\n      if (MediaRecorder.isTypeSupported('audio/mp4')) {\n        mimeType = 'audio/mp4';\n      } else if (MediaRecorder.isTypeSupported('audio/webm')) {\n        mimeType = 'audio/webm';\n      } else {\n        mimeType = 'audio/wav';\n      }\n      mediaRecorderRef.current = new window.MediaRecorder(stream, {\n        mimeType\n      });\n      chunksRef.current = [];\n      mediaRecorderRef.current.ondataavailable = e => {\n        if (e.data.size > 0) chunksRef.current.push(e.data);\n      };\n      mediaRecorderRef.current.onstop = () => {\n        const blob = new Blob(chunksRef.current, {\n          type: mimeType\n        });\n        console.log('錄音結束，產生的 blob:', blob, 'size:', blob.size);\n        // 關閉所有 audio track，釋放麥克風\n        if (streamRef.current) {\n          streamRef.current.getTracks().forEach(track => track.stop());\n          streamRef.current = null;\n        }\n        if (blob.size === 0) {\n          if (onError) onError('錄音失敗，沒有取得音訊資料');\n          return;\n        }\n        onStop(blob);\n      };\n      mediaRecorderRef.current.onerror = event => {\n        var _event$error;\n        if (onError) onError('錄音過程發生錯誤: ' + ((_event$error = event.error) === null || _event$error === void 0 ? void 0 : _event$error.message));\n      };\n      mediaRecorderRef.current.start();\n      setRecording(true);\n    } catch (err) {\n      console.error('錄音啟動失敗:', err);\n      if (onError) onError('無法啟動錄音，請檢查麥克風權限: ' + err.message);\n    }\n  };\n  const stopRecording = () => {\n    if (mediaRecorderRef.current) {\n      mediaRecorderRef.current.stop();\n      setRecording(false);\n    }\n  };\n  return {\n    recording,\n    startRecording,\n    stopRecording\n  };\n};\n_s(useRecorder, \"9v52V+AVIbe+ymAXI1uIDQGJq/Y=\");\nexport default useRecorder;","map":{"version":3,"names":["useState","useRef","useRecorder","onStop","onError","_s","recording","setRecording","mediaRecorderRef","streamRef","chunksRef","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","current","mimeType","MediaRecorder","isTypeSupported","window","ondataavailable","e","data","size","push","onstop","blob","Blob","type","console","log","getTracks","forEach","track","stop","onerror","event","_event$error","error","message","start","err","stopRecording"],"sources":["/Users/wenhsu/Documents/my_project/whisper/frontend/src/hooks/useRecorder.js"],"sourcesContent":["import { useState, useRef } from 'react';\n\nconst useRecorder = (onStop, onError) => {\n  const [recording, setRecording] = useState(false);\n  const mediaRecorderRef = useRef(null);\n  const streamRef = useRef(null);\n  const chunksRef = useRef([]);\n\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      streamRef.current = stream;\n      let mimeType = '';\n      if (MediaRecorder.isTypeSupported('audio/mp4')) {\n        mimeType = 'audio/mp4';\n      } else if (MediaRecorder.isTypeSupported('audio/webm')) {\n        mimeType = 'audio/webm';\n      } else {\n        mimeType = 'audio/wav';\n      }\n      mediaRecorderRef.current = new window.MediaRecorder(stream, { mimeType });\n      chunksRef.current = [];\n      mediaRecorderRef.current.ondataavailable = (e) => {\n        if (e.data.size > 0) chunksRef.current.push(e.data);\n      };\n      mediaRecorderRef.current.onstop = () => {\n        const blob = new Blob(chunksRef.current, { type: mimeType });\n        console.log('錄音結束，產生的 blob:', blob, 'size:', blob.size);\n        // 關閉所有 audio track，釋放麥克風\n        if (streamRef.current) {\n          streamRef.current.getTracks().forEach(track => track.stop());\n          streamRef.current = null;\n        }\n        if (blob.size === 0) {\n          if (onError) onError('錄音失敗，沒有取得音訊資料');\n          return;\n        }\n        onStop(blob);\n      };\n      mediaRecorderRef.current.onerror = (event) => {\n        if (onError) onError('錄音過程發生錯誤: ' + event.error?.message);\n      };\n      mediaRecorderRef.current.start();\n      setRecording(true);\n    } catch (err) {\n      console.error('錄音啟動失敗:', err);\n      if (onError) onError('無法啟動錄音，請檢查麥克風權限: ' + err.message);\n    }\n  };\n\n  const stopRecording = () => {\n    if (mediaRecorderRef.current) {\n      mediaRecorderRef.current.stop();\n      setRecording(false);\n    }\n  };\n\n  return { recording, startRecording, stopRecording };\n};\n\nexport default useRecorder;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}