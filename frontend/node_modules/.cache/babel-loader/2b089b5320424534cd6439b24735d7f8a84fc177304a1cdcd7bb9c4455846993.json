{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useRef } from 'react';\nconst useRecorder = onStop => {\n  _s();\n  const [recording, setRecording] = useState(false);\n  const mediaRecorderRef = useRef(null);\n  const chunksRef = useRef([]);\n  const startRecording = async () => {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    mediaRecorderRef.current = new window.MediaRecorder(stream);\n    chunksRef.current = [];\n    mediaRecorderRef.current.ondataavailable = e => {\n      if (e.data.size > 0) chunksRef.current.push(e.data);\n    };\n    mediaRecorderRef.current.onstop = () => {\n      const blob = new Blob(chunksRef.current, {\n        type: 'audio/wav'\n      });\n      onStop(blob);\n    };\n    mediaRecorderRef.current.start();\n    setRecording(true);\n  };\n  const stopRecording = () => {\n    if (mediaRecorderRef.current) {\n      mediaRecorderRef.current.stop();\n      setRecording(false);\n    }\n  };\n  return {\n    recording,\n    startRecording,\n    stopRecording\n  };\n};\n_s(useRecorder, \"BVEtJSUBCsfe2+TcDjhEqTf8B44=\");\nexport default useRecorder;","map":{"version":3,"names":["useState","useRef","useRecorder","onStop","_s","recording","setRecording","mediaRecorderRef","chunksRef","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","current","window","MediaRecorder","ondataavailable","e","data","size","push","onstop","blob","Blob","type","start","stopRecording","stop"],"sources":["/Users/wenhsu/Documents/my_project/whisper/frontend/src/hooks/useRecorder.js"],"sourcesContent":["import { useState, useRef } from 'react';\n\nconst useRecorder = (onStop) => {\n  const [recording, setRecording] = useState(false);\n  const mediaRecorderRef = useRef(null);\n  const chunksRef = useRef([]);\n\n  const startRecording = async () => {\n    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n    mediaRecorderRef.current = new window.MediaRecorder(stream);\n    chunksRef.current = [];\n    mediaRecorderRef.current.ondataavailable = (e) => {\n      if (e.data.size > 0) chunksRef.current.push(e.data);\n    };\n    mediaRecorderRef.current.onstop = () => {\n      const blob = new Blob(chunksRef.current, { type: 'audio/wav' });\n      onStop(blob);\n    };\n    mediaRecorderRef.current.start();\n    setRecording(true);\n  };\n\n  const stopRecording = () => {\n    if (mediaRecorderRef.current) {\n      mediaRecorderRef.current.stop();\n      setRecording(false);\n    }\n  };\n\n  return { recording, startRecording, stopRecording };\n};\n\nexport default useRecorder;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAExC,MAAMC,WAAW,GAAIC,MAAM,IAAK;EAAAC,EAAA;EAC9B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAMO,gBAAgB,GAAGN,MAAM,CAAC,IAAI,CAAC;EACrC,MAAMO,SAAS,GAAGP,MAAM,CAAC,EAAE,CAAC;EAE5B,MAAMQ,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IACzEP,gBAAgB,CAACQ,OAAO,GAAG,IAAIC,MAAM,CAACC,aAAa,CAACP,MAAM,CAAC;IAC3DF,SAAS,CAACO,OAAO,GAAG,EAAE;IACtBR,gBAAgB,CAACQ,OAAO,CAACG,eAAe,GAAIC,CAAC,IAAK;MAChD,IAAIA,CAAC,CAACC,IAAI,CAACC,IAAI,GAAG,CAAC,EAAEb,SAAS,CAACO,OAAO,CAACO,IAAI,CAACH,CAAC,CAACC,IAAI,CAAC;IACrD,CAAC;IACDb,gBAAgB,CAACQ,OAAO,CAACQ,MAAM,GAAG,MAAM;MACtC,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACjB,SAAS,CAACO,OAAO,EAAE;QAAEW,IAAI,EAAE;MAAY,CAAC,CAAC;MAC/DvB,MAAM,CAACqB,IAAI,CAAC;IACd,CAAC;IACDjB,gBAAgB,CAACQ,OAAO,CAACY,KAAK,CAAC,CAAC;IAChCrB,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC;EAED,MAAMsB,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAIrB,gBAAgB,CAACQ,OAAO,EAAE;MAC5BR,gBAAgB,CAACQ,OAAO,CAACc,IAAI,CAAC,CAAC;MAC/BvB,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,OAAO;IAAED,SAAS;IAAEI,cAAc;IAAEmB;EAAc,CAAC;AACrD,CAAC;AAACxB,EAAA,CA5BIF,WAAW;AA8BjB,eAAeA,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}